Crie um monorepo chamado EsferaZap: um SaaS multi-tenant de chatbots de WhatsApp com IA, inspirado funcionalmente no benchmark público Whazing-SaaS (https://github.com/cleitonme/Whazing-SaaS), mas com branding próprio da empresa insightEsfera.

Objetivo
Entregar o MVP do EsferaZap com:

Cadastro e login via Firebase Auth.

Dashboard pós-login.

CRUD mínimo de “bots” com campos nome e instruções (prompt do bot).

Geração de QR Code para conectar WhatsApp via Baileys (stub funcional que exibe QR).

Salvamento no Firestore (coleções: users, bots, sessions, messages).

Identidade Visual
Marca: insightEsfera; produto: EsferaZap (alternativas internas: InsightZap, ZapEsfera).

Cores: azul, branco e cinza; tom de voz: profissional e orientado a dados.

Basear UI no site institucional insightesfera.io; app em subdomínio (ex.: app.esferazap.io) — para o MVP, apenas mantenha a identidade visual.

Tech Stack (monorepo)
Frontend: Next.js + React + TypeScript + Tailwind CSS.

Backend: Node.js + TypeScript + Express (ou NestJS se preferir), padrões SOLID.

WhatsApp: Baileys (QR + status de conexão).

IA: interface para LLM (provider selecionável: OpenAI ou Gemini) — stub aceitável no MVP.

Banco: Firebase (Firestore + Authentication).

Hospedagem Dev: Replit rodando frontend (3000) e backend (4000) em paralelo.

Estrutura esperada (alto nível)
apps/web (Next.js: páginas /, /login, /signup, /dashboard)

apps/api (Express: rotas /health, /users, /bots, /whatsapp)

shared/ (constantes/tipos)

config/ (ESLint, Prettier, Jest, Firebase rules)

scripts para dev rodando web + api juntos.

Funcionalidades do MVP
Autenticação

Signup: Nome, Email, Senha, Empresa → cria usuário no Firebase Auth e grava em users (Firestore).

Login: redireciona para /dashboard.

Dashboard

Criar bot: nome + instruções (textarea) → salva em bots.

Listar bots do usuário.

Conectar WhatsApp: botão que gera QR (via backend/baileys) e exibe na tela; rota de status simples.

Segurança

Regras do Firestore: cada usuário só lê/escreve seus documentos (request.auth.uid == resource.data.userId).

Backend valida ID Token do Firebase nas rotas autenticadas.

Qualidade mínima
ESLint + Prettier configurados no monorepo.

Jest configurado e pelo menos 1 teste unitário no backend e 1 teste de componente no frontend.

Scripts: dev, build, test, lint.

Variáveis de ambiente (usar Secrets do Replit)
Frontend:

NEXT_PUBLIC_FIREBASE_API_KEY, NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN, NEXT_PUBLIC_FIREBASE_PROJECT_ID, NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET, NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID, NEXT_PUBLIC_FIREBASE_APP_ID

NEXT_PUBLIC_API_URL (ex.: http://localhost:4000)

Backend:

FIREBASE_PROJECT_ID, FIREBASE_CLIENT_EMAIL, FIREBASE_PRIVATE_KEY (com \n), FIREBASE_DATABASE_URL

AI_PROVIDER (openai | gemini), OPENAI_API_KEY (stub ok), GEMINI_API_KEY (stub ok)

WA_SESSION_COLLECTION=wa_sessions, PORT=4000, NODE_ENV=development

Entregáveis deste passo (Tarefa Inicial)
Monorepo criado e rodando no Replit com um comando (Run) que:

instala dependências e sobe API (porta 4000) + Web (porta 3000) em paralelo.

Firebase configurado (Auth + Firestore) e páginas /signup e /login funcionando, salvando perfil do usuário em users no primeiro cadastro.

Dashboard com:

criação de bot (nome + instruções),

listagem de bots,

botão “Conectar WhatsApp” que retorna e exibe QR Code (stub Baileys aceitável).

Regras do Firestore aplicadas para isolar dados por uid.

README curto explicando:

como colocar as variáveis no Replit Secrets,

como rodar (botão Run),

endpoints básicos e roadmap breve.

Critérios de aceite
Consigo criar conta, logar e ser redirecionado ao /dashboard.

Consigo criar pelo menos 1 bot e vê-lo listado.

Ao clicar “Conectar WhatsApp”, é exibido um QR Code (mesmo que o envio/recebimento real ainda não esteja ativo no MVP).

Dados do usuário e bots ficam apenas acessíveis ao respectivo uid.

Lint e testes básicos rodam com sucesso.

Foque em claridade, organização e identidade visual coerente com insightesfera.io, evitando código desnecessário além do MVP descrito.